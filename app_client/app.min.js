(function () {

    angular.module('RotondeApp', ['ngRoute', 'ngMaterial', 'ui.calendar']);
    function config($routeProvider, $locationProvider) {
        $routeProvider
            .when('/', {
                templateUrl: 'home/home.view.html',
                controller: 'homeCtrl',
                controllerAs: 'vm'
            })
            .when('/register', {
                templateUrl: '/auth/register/registerOrga.view.html',
                controller: 'registerCtrl',
                controllerAs: 'vm'
            })
            .when('/login', {
                templateUrl: '/auth/login/login.view.html',
                controller: 'loginCtrl',
                controllerAs: 'vm'
            })
            .when('/profile', {
                templateUrl: '/profile/profile.view.html',
                controller: 'profileCtrl',
                controllerAs: 'vm'
            })
            .when('/book', {
                templateUrl: '/reservations/reservations.view.html',
                controller: 'reservationsCtrl',
                controllerAs: 'vm'
            })
            .when('/bookSSIAP', {
                templateUrl: '/reservations/reservationSSIAP.view.html',
                controller: 'reservationSSIAPCtrl',
                controllerAs: 'vm'
            })
            .when('/addArticle', {
                templateUrl: '/addArticle/addArticle.view.html',
                controller: 'addArticleCtrl',
                controllerAs: 'vm'
            })
            .when('/planning', {
                templateUrl: 'planning.html'
            })

            .otherwise({redirectTo: '/'});

        // use the HTML5 History API
        $locationProvider.html5Mode(true);
    }

    function run($rootScope, $location, authentication) {
        $rootScope.$on('$routeChangeStart', function (event, nextRoute, currentRoute) {
            if (($location.path() === '/profile'
                || $location.path() === '/book'
                || $location.path() == '/addArticle'
                || $location.path() == '/bookSSIAP')
                && !authentication.isLoggedIn()) {
                $location.path('/login');
            }
        });
    }

    angular
        .module('RotondeApp')
        .config(['$routeProvider', '$locationProvider', config])
        .run(['$rootScope', '$location', 'authentication', run]);

})();


(function () {
    angular
        .module('RotondeApp')
        .controller('addArticleCtrl', addArticleCtrl);

    addArticleCtrl.$inject = ['authentication', 'meanData'];
    function addArticleCtrl(authentication, meanData) {
        var vm = this;

        vm.multipleDates = false;
        vm.minDate = new Date();

        vm.article = {
            name: "",
            dateIn: new Date(),
            dateOut: new Date(),
            time: "",
            text:"",
            orgaID: authentication.currentUser().id,
            orgaName: authentication.currentUser().name
        };

        vm.updateDateOut = function() {
            if (vm.article.dateOut < vm.article.dateIn){
                vm.article.dateOut = vm.article.dateIn;
            }
        };

        vm.onSubmit = function () {
            meanData.postArticle(vm.article, function (response) {
                if(response.status === 200){
                    //todo party if success
                } else{
                    //todo cry in the corner
                }
            })
        };
    }

})();
(function () {

    angular
        .module('RotondeApp')
        .controller('homeCtrl', homeCtrl);

    function homeCtrl() {
        console.log('Home controller is running');
    }

})();
(function () {

    angular
        .module('RotondeApp')
        .controller('profileCtrl', profileCtrl);

    profileCtrl.$inject = ['$scope', 'authentication', 'meanData', 'planningService'];
    function profileCtrl($scope, authentication, meanData, planningService) {
        var vm = this;
        vm.isAdmin = false;
        vm.isOrga = false;
        vm.sReservations = [];
        vm.articles = [];
        vm.reservations = [];

        vm.clickedEvent = null;
        $scope.$watch(planningService.getClickedEvent, function (change) {
            vm.clickedEvent = change;
        });

        vm.formatEvent = function () {
            return planningService.formatEvent(vm.clickedEvent);
        };

        vm.hasImage = function (article) {
            return (article.imageUrl != "");
        };

        vm.formatDate = function (reservation) {
            var temp = moment(reservation.dateIn).format('DD-MM-YYYY');
            if (reservation.dateOut != reservation.dateIn) {
                temp += " au " + moment(reservation.dateOut).format('DD-MM-YYYY');
                temp = "du " + temp;
            } else {
                temp = "le " + temp
            }
            return temp;
        };

        function onUserIsOrga() {
            vm.isOrga = true;

            //SSIAP Reservations
            var orgaID = authentication.currentUser().id;
            meanData.getReservationSSIAP(orgaID, false)
                .success(function (data) {
                    vm.sReservations = data;
                })
                .error(function (e) {
                    console.log(e);
                });

            //Articles
            meanData.getUserArticles(orgaID, false)
                .success(function (data) {
                    vm.articles = data;
                })
                .error(function (e) {
                    console.log(e);
                });


            //Hall Reservation
            meanData.getUserReservations(orgaID, false)
                .success(function (data) {
                    vm.reservations = data;
                })
                .error(function (e) {
                    console.log(e);
                });
        }

        function onUserIsAdmin() {
            vm.isAdmin = true;

            vm.addedSlots = [];

            /****************************************SSIAP Reservations************************************************/
            meanData.getPendingSSIAPReservation(false, false)
                .success(function (data) {
                    vm.sReservations = data;
                })
                .error(function (e) {
                    console.log(e);
                });

            vm.archiveSSIAPRes = function (res) {
                res.archived = true;
                meanData.archiveReservationSSIAP(res)
                    .success(function (data) {
                        for (let i = 0; i < vm.sReservations.length; i++) {
                            if (vm.sReservations[i]._id == res._id) {
                                vm.sReservations.splice(i, 1);
                            }
                        }
                    })
                    .error(function (e) {
                        console.log(e)
                    });
            };

            /************************************************Articles**************************************************/
            meanData.getPendingArticles()
                .success(function (data) {
                    vm.articles = data;
                })
                .error(function (e) {
                    console.log(e);
                });

            vm.validArticle = function (article){
                article.valid = true;
                meanData.editArticle(article)
                    .success(function(data){
                        for (let i = 0; i < vm.articles.length; i++) {
                            if (vm.articles[i]._id == article._id) {
                                vm.articles.splice(i, 1);
                            }
                        }
                    })
                    .error(function(e){
                        console.log(e.message)
                    })
            };

            /*************************************************Reservation**********************************************/
            meanData.getPendingReservations()
                .success(function (data) {
                    vm.reservations = data;
                })
                .error(function (e) {
                    console.log(e);
                });

            vm.addSlot = function (orgaID, orgaName, slotToAdd) {
                console.log(slotToAdd);
                var slots = [];

                function newSlot(slotDate, period) {
                    let s =
                        {
                            orgaID: orgaID,
                            orgaName: orgaName,
                            date: slotDate,
                            period: period,
                            audience: slotToAdd.audience
                        };
                    return s;
                }

                var startDate = moment(slotToAdd.dateIn).startOf('day');
                console.log("startDate: " + moment(startDate).format('DD-MM-YYYY-hh:mm:ss'));
                var endDate = moment(slotToAdd.dateOut).startOf('day');
                console.log("endDate: " + moment(endDate).format('DD-MM-YYYY-hh:mm:ss'));
                for (var date = moment(startDate); date.diff(endDate) <= 0; date.add(1, 'days')) {
                    console.log(moment(date).format('DD-MM-YYYY'));
                    var d = new Date(date.get("year"),
                        date.get("month"),
                        date.get("date"), 0, 0, 0, 0);
                    if (slotToAdd.morning) {
                        slots.push(newSlot(d, "morning"));
                    }
                    if (slotToAdd.afternoon) {
                        slots.push(newSlot(d, "afternoon"));
                    }
                    if (slotToAdd.evening) {
                        slots.push(newSlot(d, "evening"));
                    }
                }
                meanData.postSlots(slots)
                    .success(function (data) {
                        vm.addedSlots.push(slotToAdd._id);
                        planningService.addSlots(data);
                    })
                    .error(function (error) {
                        console.log(error.message);
                    })
            };

            vm.archiveReservation = function (reservation){
                reservation.archived = true;
                meanData.editReservation(reservation)
                    .success(function(data){
                        for (let i = 0; i< vm.reservations.length; i++){
                            if(reservation._id == vm.reservations[i]._id){
                                vm.reservations.splice(i, 1);
                                break;
                            }
                        }
                    })
                    .error(function(error){
                        console.log(error.message);
                    })
            };

            vm.onPlanning = function (slot) {
                for (let i = 0; i < vm.addedSlots.length; i++) {
                    if (vm.addedSlots[i] == slot._id) {
                        return true;
                    }
                }
                return false;
            };

        }

        /***************************************************User*******************************************************/
        vm.user = {};
        meanData.getProfile()
            .success(function (data) {
                vm.user = data;
                if (vm.user.accountType == "OrgaINSA") {
                    onUserIsOrga();
                }
                if (vm.user.accountType == "admin") {
                    onUserIsAdmin();
                }
            })
            .error(function (e) {
                console.log(e);
            });
    }

})();
(function () {

    angular
        .module('RotondeApp')
        .controller('reservationsCtrl', reservationsCtrl)

    reservationsCtrl.$inject = ['$location', 'authentication', 'meanData'];
    function reservationsCtrl($location, authentication, meanData) {
        var vm = this;
        vm.minDate = new Date();
        vm.result = "";

        vm.reservations = {
            res : [newReservation()],
            light: 0,
            sound: 0,
            comments :"",
            orgaID: authentication.currentUser().id,
            orgaName: authentication.currentUser().name
        };

        vm.addReservation = function() {
            vm.reservations.res.push(newReservation());
        };

        vm.removeReservation = function() {
          vm.reservations.res.pop();
        };

        vm.formatDate = function(reservation){
            let value ="";
            let din = reservation.dateIn;
            value = moment(din).format('DD-MM-YYYY')

            if(reservation.isRange) {
                let dout = reservation.dateOut;
                value += " au " + moment(dout).format('DD-MM-YYYY');
            }
            return value;
        };

        vm.updateDateOut = function (reservation){
            if (reservation.dateOut < reservation.dateIn){
                reservation.dateOut = reservation.dateIn;
            }
        };

        vm.emptySlots = function (reservation) {
            return (reservation.morning || reservation.afternoon || reservation.evening)
        };

        vm.onSubmit = function (){
            //todo check slots
            meanData.postReservations(vm.reservations)
                .error(function (err) {
                    //alert(err.message);
                    vm.result = "Erreur lors de l'enregistrement de votre réservation"
                })
                .then(function () {
                    vm.reservations = {
                        res : [newReservation()],
                        orgaID: authentication.currentUser().id,
                        orgaName: authentication.currentUser().name,
                        light: 0,
                        sound: 0,
                        comments :""
                    };
                    vm.result = "Votre/vos réservations ont été enregistrées avec succès. Un mail récapitulatif" +
                        " viens de vous être envoyé."
                });
        };

        function newReservation(){
            var res = {
                name:"",
                isRange: false,
                dateIn: new Date(),
                dateOut: new Date(),
                morning: false,
                afternoon: false,
                evening: false,
                audience: false
            };
            return res;
        }
    };



})();


(function () {
    angular
        .module('RotondeApp')
        .controller('reservationSSIAPCtrl', reservationSSIAPCtrl);

    reservationSSIAPCtrl.$inject = ['authentication', 'meanData'];
    function reservationSSIAPCtrl(authentication, meanData) {
        var vm = this;

        vm.reservation = {
            name:"",
            dateIn: new Date(),
            dateOut: new Date(),
            timeOpening: "",
            timeStart: "",
            duration: "",
            comment: "",
            orgaID: authentication.currentUser().id,
            orgaName: authentication.currentUser().name
        };

        vm.multipleDates = false;
        vm.minDate = new Date();

        vm.updateDateOut = function() {
            if (vm.reservation.dateOut < vm.reservation.dateIn){
                vm.reservation.dateOut = vm.reservation.dateIn;
            }
        };

        vm.onSubmit = function () {
            meanData.postReservationSSIAP(vm.reservation, function (response) {
                if(response.status === 200){
                    //todo party if success
                } else{
                    //todo cry in the corner
                }
            })
        };
    }

})();
(function () {
    angular
        .module('RotondeApp')
        .directive('fileModel', ['$parse', function ($parse) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var model = $parse(attrs.fileModel);
                    var modelSetter = model.assign;

                    var onChangeFunc = function () {
                        scope.$apply(function () {
                            modelSetter(scope, element[0].files[0]);
                        })
                    };
                    element.bind('change', onChangeFunc);
                }
            };
        }])
})();


(function () {

    angular
        .module('RotondeApp')
        .service('authentication', authentication);

    authentication.$inject = ['$http', '$window'];
    function authentication($http, $window) {

        var saveToken = function (token) {
            $window.localStorage['mean-token'] = token;
        };

        var getToken = function () {
            return $window.localStorage['mean-token'];
        };

        var isLoggedIn = function () {
            var token = getToken();
            var payload;

            if (token) {
                payload = token.split('.')[1];
                payload = $window.atob(payload);
                payload = JSON.parse(payload);

                return payload.exp > Date.now() / 1000;
            } else {
                return false;
            }
        };

        var currentUser = function () {
            if (isLoggedIn()) {
                var token = getToken();
                var payload = token.split('.')[1];
                payload = $window.atob(payload);
                payload = JSON.parse(payload);
                return {
                    id : payload._id,
                    email: payload.email,
                    name: payload.name
                };
            }
        };

        register = function (user) {
            return $http.post('/api/register', user).success(function (data) {
                saveToken(data.token);
            });
        };

        login = function (user) {
            return $http.post('/api/login', user).success(function (data) {
                saveToken(data.token);
            });
        };

        logout = function () {
            $window.localStorage.removeItem('mean-token');
        };

        return {
            currentUser: currentUser,
            saveToken: saveToken,
            getToken: getToken,
            isLoggedIn: isLoggedIn,
            register: register,
            login: login,
            logout: logout
        };
    }


})();
(function () {

    angular
        .module('RotondeApp')
        .service('meanData', meanData);

    meanData.$inject = ['$http', 'authentication', 'multipartForm'];
    function meanData($http, authentication, multipartForm) {

        var getProfile = function () {
            return $http.get('/api/profile', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var postReservation = function (reservations) {
            return $http.post('/api/reservations',
                {
                    reservations: reservations
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var getUserReservations = function (orgaID, archived) {
            var query = "";
            if (orgaID != null) {
                query += "?orgaID=" + orgaID;
                if (archived != null) {
                    query += "&archived=" + archived;
                }
            } else if (archived != null) {
                query += "?archived=" + archived;
            }

            return $http.get('/api/reservations' + query, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getPendingReservations = function () {
            return $http.get('/api/reservations?archived=false', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var editReservation = function(reservation){
            return $http.put('/api/reservations', {
                reservation: reservation
            }, {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                }
            })
        };

        var postReservationSSIAP = function (reservation) {
            return $http.post('/api/reservationSSIAP',
                {
                    reservation: reservation
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var archiveReservationSSIAP = function (reservation) {
            return $http.put('/api/reservationSSIAP',
                {
                    reservation: reservation
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var getReservationSSIAP = function (orgaID, archived) {
            var query = "";
            if (orgaID != null) {
                query += "?orgaID=" + orgaID;
                if (archived != null) {
                    query += "&archived=" + archived;
                }
            } else if (archived != null) {
                query += "?archived=" + archived;
            }

            return $http.get('/api/reservationSSIAP' + query, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getPendingSSIAPReservation = function () {
            return $http.get('/api/reservationSSIAP?archived=false', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getUserArticles = function (orgaID, archived) {
            var query = "";
            if (orgaID != null) {
                query += "?orgaID=" + orgaID;
                if (archived != null) {
                    query += "&archived=" + archived;
                }
            } else if (archived != null) {
                query += "?archived=" + archived;
            }

            return $http.get('/api/article' + query, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getPendingArticles = function () {
            return $http.get('/api/article?valid=false', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var editArticle = function (article) { //todo on article edition, handle file upload in angular?
            return $http.put('/api/article?valid=false',
                {
                    article: article
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };


        var postArticle = function (article) {
            var url = '/api/article';
            return multipartForm.post(url, article, function (response) {
                if (response.status === 200) {
                    //todo party hard
                }
            });
        };

        var postSlots = function (slots) {
            return $http.post('/api/slot',
                {
                    slots: slots
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var getSlots = function (from, to) {
            return $http.get('/api/slot?from=' + from + '&to=' + to);
        };

        return {
            getProfile: getProfile,
            postReservations: postReservation,
            getUserReservations: getUserReservations,
            getPendingReservations: getPendingReservations,
            editReservation: editReservation,
            postArticle: postArticle,
            editArticle: editArticle,
            getUserArticles: getUserArticles,
            getPendingArticles: getPendingArticles,
            postReservationSSIAP: postReservationSSIAP,
            getReservationSSIAP: getReservationSSIAP,
            getPendingSSIAPReservation: getPendingSSIAPReservation,
            archiveReservationSSIAP: archiveReservationSSIAP,
            postSlots: postSlots,
            getSlots: getSlots
        };
    }

})();
(function () {

    angular
        .module('RotondeApp')
        .service('multipartForm', multipartForm);

    multipartForm.$inject = ['$http', 'authentication'];
    function multipartForm($http, authentication) {
        this.post = function(uploadUrl, data, callback){
            var fd = new FormData();
            for(var key in data){
                fd.append(key, data[key]);
            }

            $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: {
                    'Content-Type': undefined,
                    'Authorization': 'Bearer ' + authentication.getToken()}
            }).then(
                function(response){
                   callback(response);
                },
                function(response){
                    callback(response);
                }
            );
        }

    }

})();
(function () {

    angular
        .module('RotondeApp')
        .service('planningService', planning);

    planning.$inject = ['meanData'];
    function planning(meanData) {

        var clickedEvent = null;
        var rawData = [];
        var formatedEvents = [];


        var stringToColour = function (str) {
            var hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            var colour = '#';
            for (let i = 0; i < 3; i++) {
                var value = (hash >> (i * 8)) & 0xFF;
                colour += ('00' + value.toString(16)).substr(-2);
            }
            return colour;
        };

        var updateEvents = function (data) {
            var events = [];
            for (var i = 0; i < data.length; i++) {
                var date = new Date(data[i].date);
                var d = date.getDate();
                var m = date.getMonth();
                var y = date.getFullYear();
                var start;
                var end;
                if (data[i].period == "morning") {
                    start = new Date(y, m, d, 8, 0);
                    end = new Date(y, m, d, 13, 0);
                } else if (data[i].period == "afternoon") {
                    start = new Date(y, m, d, 13, 0);
                    end = new Date(y, m, d, 18, 0);
                } else if (data[i].period == "evening") {
                    start = new Date(y, m, d, 18, 0);
                    end = new Date(y, m, d, 23, 59);
                }
                var name = data[i].orgaName;
                if (data[i].audience) {
                    name = "*" + name + "*";
                }
                events.push({
                    id: data[i]._id,
                    title: name,
                    start: start,
                    end: end,
                    allDay: false,
                    color: stringToColour(data[i].orgaID),
                    audience: data[i].audience,
                    orgaName: data[i].orgaName,
                    period: data[i].period
                });
            }
            formatedEvents = events;
            return events;
        };

        var getSlots = function (from, to, callback) {
            meanData.getSlots(from, to)
                .success(function (data) {
                    rawData = data;
                    callback(updateEvents(data));
                })
                .error(function (error) {
                    console.log(error.message);
                    callback(null);
                })
        };

        var getFormatedEvent = function() {
            return formatedEvents;
        };

        var addSlots = function (slots) {
            for (let i = 0; i < slots.length ; i++){
                rawData.push(slots[i]);
            }
            updateEvents(rawData);
        };

        var removeSlot = function (slotId) {

        };

        var setClickedEvent = function (event) {
            clickedEvent = event;
        };

        var getClickedEvent = function (event) {
            return clickedEvent;
        };

        var formatEvent = function (event) {
            if (event == null) return;
            let res = {};
            res.date = moment(event.start).format("DD-MM-YYYY");
            res.audience = event.audience ? "oui" : "non";
            res.period = (event.period == "morning") ? "Matin" : ((event.period == "afternoon") ? "Après-midi" : "Soirée")
            return res;
        };

        return {
            getSlots: getSlots,
            addSlots: addSlots,
            removeSlot: removeSlot,
            getFormatedEvent: getFormatedEvent,
            setClickedEvent: setClickedEvent,
            getClickedEvent: getClickedEvent,
            formatEvent: formatEvent
        }
    }
})();
(function () {
    angular
        .module('RotondeApp')
        .config(function($mdDateLocaleProvider) {
                $mdDateLocaleProvider.formatDate = function (date) {
                    return date ? moment(date).format('DD-MM-YYYY') : '';
                };

                $mdDateLocaleProvider.parseDate = function (dateString) {
                    var m = moment(dateString, 'DD-MM-YYYY', true);
                    return m.isValid() ? m.toDate() : new Date(NaN);
                };
            }
        )
})();
(function () {

    angular
        .module('RotondeApp')
        .controller('registerCtrl', registerCtrl);

    registerCtrl.$inject = ['$location', 'authentication'];
    function registerCtrl($location, authentication) {
        var vm = this;

        vm.credentials = {
            name: "",
            email: "",
            phone: "",
            password: "",
            accountType:"OrgaINSA"
        };

        vm.onSubmit = function () {
            console.log('Submitting registration');
            authentication
                .register(vm.credentials)
                .error(function (err) {
                    alert(err);
                })
                .then(function () {
                    $location.path('profile');
                });
        };

    }

})();
(function () {

    angular
        .module('RotondeApp')
        .controller('loginCtrl', loginCtrl);

    loginCtrl.$inject = ['$location', 'authentication'];
    function loginCtrl($location, authentication) {
        var vm = this;

        vm.credentials = {
            email: "",
            password: ""
        };

        vm.onSubmit = function () {
            authentication
                .login(vm.credentials)
                .error(function (err) {
                    alert(err);
                })
                .then(function () {
                    $location.path('profile');
                });
        };

    }

})();
(function () {

    angular
        .module('RotondeApp')
        .controller('navigationCtrl', navigationCtrl);

    navigationCtrl.$inject = ['$location', 'authentication'];
    function navigationCtrl($location, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.currentUser = authentication.currentUser();

    }

})();
(function () {

    angular
        .module('RotondeApp')
        .directive('navigation', navigation);

    function navigation() {
        return {
            restrict: 'EA',
            templateUrl: '/common/directives/navigation/navigation.template.html',
            controller: 'navigationCtrl as navvm'
        };
    }

})();
(function () {

    angular
        .module('RotondeApp')
        .controller('planningCtrl', planningCtrl);

    planningCtrl.$inject = ['$scope', 'planningService'];
    function planningCtrl($scope, planningService) {

        $scope.events = [];
        $scope.clickedEvent = null;


        $scope.$watch(planningService.getFormatedEvent, function(change){
            angular.copy(change, $scope.events);
        });

        /* alert on eventClick */
        $scope.alertOnEventClick = function( date, jsEvent, view){
            planningService.setClickedEvent(date);
        };
        /* Change View */
        $scope.changeView = function(view,calendar) {
            uiCalendarConfig.calendars[calendar].fullCalendar('changeView',view);
        };
        /* Change View */
        $scope.renderCalender = function(calendar) {
            if(uiCalendarConfig.calendars[calendar]){
                uiCalendarConfig.calendars[calendar].fullCalendar('render');
            }
        };

        planningService.getSlots("2016-02", "2018-02", function(data){
            angular.copy(data, $scope.events);
        });

        /* config object */
        $scope.uiConfig = {
            calendar:{
                height: 500,
                editable: false,
                header:{
                    left: 'month agendaWeek',
                    center: 'title',
                    right: 'today prev,next'
                },
                locale: "fr",
                dayNames: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"],
                eventClick: $scope.alertOnEventClick,
                eventRender: $scope.eventRender
            }
        };

        /* event sources array*/
        $scope.eventSources = [$scope.events];
    }
})();
(function () {

    angular
        .module('RotondeApp')
        .directive('planning', planning);

    function planning() {
        return {
            restrict: 'EA',
            templateUrl: '/common/directives/planning/planning.template.html',
            controller: 'planningCtrl as planvm'
        };
    }

})();
//# sourceMappingURL=app.min.js.map
